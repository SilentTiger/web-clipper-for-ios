const { readdir, writeFile } = require('fs');
const { resolve } = require('path');
const { cwd } = require('process');
const { promisify } = require('util');

async function listItemsInDir(path: string) {
  return promisify(readdir)(path, { withFileTypes: true });
}

const FileComment = `
/**
 * DO NOT MODIFY this file manually, this file is generated by 'yarn generateCode',
 * just write your plugin or launcher and run 'yarn generateCode',
 * this file will be updated automatically.
 */
`

async function generatePluginIndexCode() {
  const pluginBasicPath = './src/plugin'
  const pluginNames = (await listItemsInDir(resolve(cwd(), pluginBasicPath))).filter(item => item.isFile() && item.name !== 'index.ts').map(item => item.name.replace('.ts', ''));
  const pluginIndexCode = `${FileComment}
import { IPlugin } from '../common';
${pluginNames.map(name => `import ${name}Plugin from './${name}';`).join('\n')}

const plugins: IPlugin[] = [${pluginNames.map(name => `${name}Plugin`).join(', ')}];

export default plugins;
`
  console.log(pluginIndexCode);
  await promisify(writeFile)(resolve(cwd(), `${pluginBasicPath}/index.ts`), pluginIndexCode)
}

async function generateLauncherIndexCode() {
  const launcherBasicPath = './src/launcher'
  const launcherNames = (await listItemsInDir(resolve(cwd(), launcherBasicPath))).filter(item => item.isFile() && item.name !== 'index.ts').map(item => item.name.replace('.ts', ''));
  const pluginIndexCode = `${FileComment}
import { ILauncher } from '../common';
${launcherNames.map(name => `import ${name}Launcher from './${name}';`).join('\n')}

const launchers: ILauncher[] = [${launcherNames.map(name => `${name}Launcher`).join(', ')}];

export default launchers;
`
  console.log(pluginIndexCode);
  await promisify(writeFile)(resolve(cwd(), `${launcherBasicPath}/index.ts`), pluginIndexCode)
}



async function main() {
  generatePluginIndexCode();
  generateLauncherIndexCode();
}

main();